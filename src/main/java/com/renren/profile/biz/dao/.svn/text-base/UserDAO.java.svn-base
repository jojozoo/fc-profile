package com.renren.profile.biz.dao;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import net.paoding.rose.jade.annotation.DAO;
import net.paoding.rose.jade.annotation.ReturnGeneratedKeys;
import net.paoding.rose.jade.annotation.SQL;
import net.paoding.rose.jade.annotation.SQLParam;

import com.renren.profile.RenrenProfileConstants;
import com.renren.profile.biz.model.User;

@DAO(catalog = RenrenProfileConstants.DB_CATALOG)
public interface UserDAO {
    String TABLE             = "user";
    // -------- { Column Defines
    String ID                = "id";
    String OA_ID             = "oa_id";
    String NAME              = "name";
    String NUMBER            = "number";
    String STATUS            = "status";
    String PEMISSION_LEVEL   = "pemission_level";
    String JOB_TITLE         = "job_title";
    String LEVEL             = "level";
    String SHOW_LEVEL        = "show_level";
    String DEPARTMENT_ID     = "department_id";
    String MANAGER_ID        = "manager_id";
    String EMAIL             = "email";
    String HEAD_PIC          = "head_pic";
    // -------- } Column Defines

    String FIELD_PK          = "id";
    String FIELDS_WITHOUT_PK = "oa_id,name,number,email,head_pic,status,pemission_level,job_title,level,show_level,department_id,manager_id";
    String FIELDS_ALL        = FIELD_PK + "," + FIELDS_WITHOUT_PK;

    /**
     * 按偏移量查询员工列表,stauts=0,正常状态员工
     * 
     * @param offset
     * @param count
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where status=0 limit :offset,:count")
    public List<User> queryAll(@SQLParam("offset") int offset, @SQLParam("count") int count);

    /**
     * 获取一系列User
     * 
     * @param ids
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where id in (:1)")
    public List<User> queryAllList(Collection<Integer> ids);

    /**
     * 获取一系列User
     * 
     * @param ids
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where id in (:1)")
    public Map<Integer, User> queryAllMap(Collection<Integer> ids);

    @SQL("select COUNT(" + FIELD_PK + ") from " + TABLE)
    public int countAll();

    /**
     * 按email或者名字查询单个查询
     * 
     * @param email或者名字
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where `email` = :1 or `name` = :1")
    public User queryByEmail(String email);

    /**
     * 通过集合用户id，批量的查询出用户信息
     * 
     * @param userIdList
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where `id` in (:1)")
    public List<User> queryByUserIds(List<Integer> userIdList);

    /**
     * 按UserID单个查询，正常用户才可以查询
     * 
     * @param id
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where `id` = :1")
    public User query(int id);

    /**
     * 按collection查询
     * 
     * @param id
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where `id` in (:1)")
    public Map<Integer, User> query(Collection<Integer> ids);

    /**
     * 按UserID单个查询,我的下属
     * 
     * @param id
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where `manager_id` = :1 and `status` = 0")
    public List<User> queryAllMyFollow(int id);

    /**
     * 按UserAOID单个查询
     * 
     * @param aoId
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where `oa_id` = :1")
    public User query(String oID);

    @SQL("select " + MANAGER_ID + " from " + TABLE + " where id = :1")
    public Integer queryLeader(int userId);

    @SQL("select " + DEPARTMENT_ID + " from " + TABLE + " where id = :1")
    public Integer queryDepartment(int userId);

    /**
     * 按指定的条件搜索，注意：防止SQL注入
     * 
     * @param condition
     * @return
     */
    @SQL("select " + FIELDS_ALL + " from " + TABLE + " where ##(:1) limit :offset,:count")
    public List<User> queryByCondition(String condition, @SQLParam("offset") int offset, @SQLParam("count") int count);

    String SQL_UPDATE_MODEL_FILEDS_WITHOUT_PK = "oa_id=:model.oaId,name=:model.name,number=:model.number,email=:model.email,head_pic=:model.headPic,status=:model.status,pemission_level=:model.pemissionLevel,job_title=:model.jobTitle,level=:model.level,show_level=:model.showLevel,department_id=:model.departmentId,manager_id=:model.managerId";

    /**
     * 更新员工信息
     * 
     * @param model
     * @return
     */
    @SQL("update " + TABLE + " set " + SQL_UPDATE_MODEL_FILEDS_WITHOUT_PK + " where id=:1.id")
    public int update(@SQLParam("model") User model);

    /**
     * 修改用户头像
     * 
     * @param model
     * @return
     */
    @SQL("update " + TABLE + " set head_pic=:1 where id=:2")
    public int updateUserHeadUrl(String headUrl, int userId);

    /**
     * 更新员工职称是否显示
     * 
     * @param model
     * @return
     */
    @SQL("update " + TABLE + " set show_level=:1 where id=:2")
    public int updateUserShowLevel(int is_show, int userId);

    /**
     * 插入员工信息
     * 
     * @param model
     * @return
     */
    @SQL("insert ignore into "
            + TABLE
            + " ("
            + FIELDS_WITHOUT_PK
            + ") VALUES (:model.oaId,:model.name,:model.number,:model.email,:model.headPic,:model.status,:model.pemissionLevel,:model.jobTitle,:model.level,:model.showLevel,:model.departmentId,:model.managerId)")
    @ReturnGeneratedKeys
    public Integer save(@SQLParam("model") User model);

    /**
     * 删除员工信息
     * 
     * @param id
     */
    @SQL("delete from " + TABLE + " where `id` = :1")
    public void delete(int id);
}